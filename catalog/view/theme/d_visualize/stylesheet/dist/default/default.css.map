{"version":3,"sources":["../../../../vz-helpers/base/_typography.scss","../../../../vz-helpers/base/helper/_import.scss","../../../../vz-helpers/base/helper/_mixins.scss","default.scss","_config.scss"],"names":[],"mappings":"AAAE,eAAe;AACjB,mBAAmB;ACCnB,QAAQ;AAKR,QAAQ;ACwVO,2DAAY;ACxV3B,IAAI;AACJ;EACE,qCAA8C;EAC9C,iBAAgB;EAChB,YCToB;EDUpB,gBCFmB;EDGnB,iBCDoB;EDEpB,YAAW,EACZ;;AACD;EACE,YCdkB;EDelB,qCAAuD;EACvD,gBCL4B;EDM5B,iBCL6B;EDM7B,oBCLgC;EFyV9B,oBAAmB;EAKnB,mBAAkB;EAKlB,sBAAqB;EAKrB,qBAAoB;EAKpB,qBAAoB,ECpWvB;;AACD,uBAAuB;AACvB;EACE,gBClBmB,EDmBpB;;AACD,qCAAqC;AACrC;EACE,gBAAqC,EACtC;;AACD;EACE,kBAAuC,EACxC;;AACD;EACE,kBAAuC,EACxC;;AACD;EACE,kBAAuC,EACxC;;AACD;EACE,gBAAqC,EACtC;;AACD;EACE,kBAAsC,EACvC;;AAED;EACE,eC/CkB,EDgDnB;;AAED;EACE,0BAAyB,EAC1B","file":"../../../../../../../../../../../../../default.css","sourcesContent":["  /*Typographic*/\r\n/*End Typographic*/","@import \"mixins\";\r\n@import \"functions\";\r\n/*TEST*/\r\n//.test{\r\n//  @import \"test_mixins\";\r\n//@import \"test_functions\";\r\n//}\r\n/*TEST*/\r\n","@mixin prefixes($property, $value) {\r\n  -webkit-#{$property}: #{$value};\r\n  -khtml-#{$property}: #{$value};\r\n  -moz-#{$property}: #{$value};\r\n  -ms-#{$property}: #{$value};\r\n  -o-#{$property}: #{$value};\r\n  #{$property}: #{$value};\r\n}\r\n\r\n@mixin placeholder {\r\n  &::-webkit-input-placeholder {\r\n    @content\r\n  }\r\n  &:-moz-placeholder {\r\n    @content\r\n  }\r\n  &::-moz-placeholder {\r\n    @content\r\n  }\r\n  &:-ms-input-placeholder {\r\n    @content\r\n  }\r\n}\r\n\r\n@mixin flex {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: -webkit-flex;\r\n  display: flex;\r\n}\r\n\r\n@mixin inline-flex {\r\n  display: -webkit-inline-box;\r\n  display: -ms-inline-flexbox;\r\n  display: -webkit-inline-flex;\r\n  display: inline-flex;\r\n}\r\n\r\n@mixin transition($for: all, $value: .4s, $animate: ease) {\r\n  @include prefixes(\"transition\", $for $value $animate)\r\n}\r\n\r\n@mixin border-radius($radius: 4px) {\r\n  @include prefixes(\"border-radius\", $radius)\r\n}\r\n\r\n@mixin box-shadow($value: 0 0 5px #ccc) {\r\n  @include prefixes(\"box-shadow\", $value)\r\n}\r\n\r\n@mixin clearfix {\r\n  &:before,\r\n  &:after {\r\n    content: \" \";\r\n    display: table;\r\n  }\r\n  &:after {\r\n    clear: both;\r\n  }\r\n}\r\n@mixin arrow($direction, $size, $color) {\r\n  @if $direction == up {\r\n    border-left: $size solid transparent;\r\n    border-right: $size solid transparent;\r\n    border-bottom: $size solid $color;\r\n  } @else if $direction == down {\r\n    border-left: $size solid transparent;\r\n    border-right: $size solid transparent;\r\n    border-top: $size solid $color;\r\n  } @else if $direction == right {\r\n    border-top: $size solid transparent;\r\n    border-bottom: $size solid transparent;\r\n    border-left: $size solid $color;\r\n  } @else if $direction == left {\r\n    border-top: $size solid transparent;\r\n    border-bottom: $size solid transparent;\r\n    border-right: $size solid $color;\r\n  }\r\n}\r\n@mixin push-auto {\r\n  margin: {\r\n    left: auto;\r\n    right: auto;\r\n  }\r\n}\r\n@mixin pseudo($display: block, $pos: absolute, $content: '') {\r\n  content: $content;\r\n  display: $display;\r\n  position: $pos;\r\n}\r\n\r\n@mixin triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {\r\n  @include pseudo($pos: $position);\r\n  width: 0;\r\n  height: 0;\r\n  @if $round {\r\n    border-radius: 3px;\r\n  }\r\n  @if $direction == down {\r\n    border-left: $size solid transparent;\r\n    border-right: $size solid transparent;\r\n    border-top: $size solid $color;\r\n    margin-top: 0 - round( $size / 2.5 );\r\n  } @else if $direction == up {\r\n    border-left: $size solid transparent;\r\n    border-right: $size solid transparent;\r\n    border-bottom: $size solid $color;\r\n    margin-bottom: 0 - round( $size / 2.5 );\r\n  } @else if $direction == right {\r\n    border-top: $size solid transparent;\r\n    border-bottom: $size solid transparent;\r\n    border-left: $size solid $color;\r\n    margin-right: -$size;\r\n  } @else if $direction == left {\r\n    border-top: $size solid transparent;\r\n    border-bottom: $size solid transparent;\r\n    border-right: $size solid $color;\r\n    margin-left: -$size;\r\n  }\r\n}\r\n@mixin retina($image, $width, $height) {\r\n  @media (min--moz-device-pixel-ratio: 1.3),\r\n  (-o-min-device-pixel-ratio: 2.6/2),\r\n  (-webkit-min-device-pixel-ratio: 1.3),\r\n  (min-device-pixel-ratio: 1.3),\r\n  (min-resolution: 1.3dppx) {\r\n    /* Serving 2x image on Retina display */\r\n    background-image: url($image);\r\n    background-size: $width $height;\r\n  }\r\n}\r\n@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {\r\n  @font-face {\r\n    font-family: quote($font-name);\r\n    src: url($file-name + '.eot');\r\n    src: url($file-name + '.eot?#iefix') format('embedded-opentype'),\r\n    url($file-name + '.woff') format('woff'),\r\n    url($file-name + '.ttf') format('truetype'),\r\n    url($file-name + '.svg##{$font-name}') format('svg');\r\n    font-weight: $weight;\r\n    font-style: $style;\r\n  }\r\n}\r\n@mixin center-transform {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n@mixin center-y-transform {\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n}\r\n@mixin center-margin($top, $left) {\r\n  position: absolute;\r\n  margin-top: - $top / 2;\r\n  margin-left: - $left / 2;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n@mixin truncate($truncation-boundary) {\r\n  max-width: $truncation-boundary;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n@mixin flex-align-center {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-grow: 1;\r\n}\r\n@mixin full-space{\r\n  content: \"\";\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n@mixin mq($width, $type: max) {\r\n  @if map_has_key($breakpoints, $width) {\r\n    $width: map_get($breakpoints, $width);\r\n    @if $type == max {\r\n      $width: $width - 1px;\r\n    }\r\n    @media only screen and (#{$type}-width: $width) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n@mixin adaptive($el, $type : 'max') {\r\n  .#{$el} {\r\n    @content;\r\n    @each $class, $screen in (xs, 'phone'), (sm, 'phablet'), (md, 'tablet'), (lg, 'desktop'), (xl, 'desktop-wide') {\r\n      @if ($type == 'min') {\r\n        @include mq($sc reen, 'min') {\r\n          &-#{$class} {\r\n            @content;\r\n          }\r\n        }\r\n      } @else {\r\n        @include mq($screen) {\r\n          &-#{$class} {\r\n            @content;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––\r\n//  Google Fonts  v.2.0.0\r\n// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––\r\n//\r\n//  Subset config\r\n//\r\n//  Note!\r\n//  The Latin subset is always included if available and need not be specified.\r\n//  Please note that if a client browser supports unicode-range the subset parameter\r\n//  is ignored; the browser will select from the subsets supported by the font to\r\n//  get what it needs to render the text.\r\n//  Source: https://developers.google.com/fonts/docs/getting_started\r\n//\r\n$google-font-subsets: (\r\n        'arabic'      : false\r\n, 'bengali'     : false\r\n, 'cyrillic'    : false\r\n, 'cyrillic-ext': false\r\n, 'devanagari'  : false\r\n, 'greek'       : false\r\n, 'greek-ext'   : false\r\n, 'gujarati'    : false\r\n, 'hebrew'      : false\r\n, 'khmer'       : false\r\n, 'latin'       : false\r\n, 'latin-ext'   : false\r\n, 'tamil'       : false\r\n, 'telugu'      : false\r\n, 'thai'        : false\r\n, 'vietnamese'  : false\r\n) !default;\r\n\r\n//\r\n//  Helper functions\r\n//\r\n@function __gf__list-unique($list) {\r\n  $result: ();\r\n  @each $item in $list { @if not index($result, $item+''){ $result: append($result, $item+'');} }\r\n  @each $item in $result { $result: set-nth($result, index($result, $item),unquote($item)); }\r\n  @return $result;\r\n}\r\n@function __gf__str-replace($string, $search, $replace: '') {\r\n  $index: str-index($string, $search);\r\n  @return if($index,\r\n          str-slice($string, 1, $index - 1) + $replace +\r\n    __gf__str-replace(str-slice($string, $index +\r\n    str-length($search)), $search, $replace),\r\n          $string);\r\n}\r\n@function __gf__str-explode($string){\r\n  $list:();\r\n  @for $i from 1 through str-length($string) { $list: append($list, str-slice($string, $i, $i)); }\r\n  @return $list;\r\n}\r\n//\r\n//   Google Fonts\r\n//\r\n@mixin google-font(\r\n  $name   : null,     //  string (unquoted will work too)\r\n  $weights: 400,      //  list or numeric value (100 200 300 400 ...)\r\n  $styles : normal,   //  list or string (normal and or italic)\r\n  $text   : null      //  string (don\\'t forget to unescape )\r\n){\r\n  //  base url\r\n  $URL: '//fonts.googleapis.com/css?family=';\r\n\r\n  //  create global variables\r\n  @if not variable-exists(__gf__combine){ $__gf__combine: false !global; }\r\n  @if not variable-exists(__gf__map){ $__gf__map: () !global; }\r\n  @if not variable-exists(google-font-subsets){ $google-font-subsets: () !global; }\r\n\r\n  //  append italic to weights\r\n  @if index($styles, italic) and not str-index($weights+'',i){\r\n    $wgt: if(index($styles, normal), $weights, ());\r\n    @each $weight in $weights { $wgt: append($wgt, $weight + i); }\r\n    $weights: $wgt;\r\n  }\r\n\r\n  //  reduce and encode text\r\n  @if $text {\r\n    $list: __gf__list-unique(__gf__str-explode($text));\r\n    $text:'&text=';\r\n    $encode:('!':'%21','#':'%23','$':'%24','&':'%26','\\'':'%27',\r\n            '(':'%28',')':'%29','*':'%2A','+':'%2B',',':'%2C',\r\n            '/':'%2F',':':'%3A',';':'%3B','=':'%3D','?':'%3F',\r\n            '@':'%40','[':'%5B',']':'%5D',' ':'%20');\r\n    @for $i from 1 through length($list) {\r\n      $char: map-get($encode,nth($list,$i)) or nth($list,$i);\r\n      $text: $text + $char;\r\n    }\r\n  }\r\n\r\n  //  subsets from config\r\n  $subset: '';\r\n  @each $set, $enabled in $google-font-subsets {\r\n    @if $enabled {\r\n      $subset: $subset + if($subset == '', '', ',') + $set;\r\n    }\r\n  }\r\n  $subset: if(str-length($subset) > 0 and $subset != latin, '&subset=' + $subset, '');\r\n\r\n  @if $name {\r\n    //  replace name whitespaces\r\n    $name: if(type-of($name) == string, unquote($name),$name);\r\n    $name: __gf__str-replace(inspect($name),' ','+');\r\n    @if $__gf__combine and not $text {\r\n      //  add weights to combine map\r\n      $wgt: map-get($__gf__map, $name) or ();\r\n      $wgt: __gf__list-unique(join($wgt, $weights, comma));\r\n      $__gf__map: map-merge($__gf__map, ($name: $wgt)) !global;\r\n    } @else {\r\n      //  create query\r\n      $query: '';\r\n      @each $weight in $weights { $query: $query + if($query != '', ',', '') + $weight; }\r\n      $query: __gf__str-replace($query, ' ');\r\n      $query: $name + if(str-length($query) > 0 and $query != '400',  ':'+ $query, '');\r\n\r\n      //  create single immport\r\n      @at-root { @import url($URL + $query + if($text, $text, '') + $subset); }\r\n    }\r\n  } @else {\r\n    //  set combine flag\r\n    $__gf__combine: true  !global;\r\n\r\n    //  nested includes\r\n    @content;\r\n\r\n    //  convert combine map to query\r\n    //  (remove weights if just 400)\r\n    $query:'';\r\n    @each $font, $weights in $__gf__map {\r\n      $query: $query + if($query != '', '|', '') + $font +\r\n                if(length($weights) == 1 and (nth($weights, 1) == '400'),\r\n                '', ':' + join((), $weights, comma));\r\n    }\r\n\r\n    //  remove query whitespaces\r\n    $query: __gf__str-replace($query,' ');\r\n\r\n    //  create combined immport\r\n    @at-root { @import url($URL + $query + $subset); }\r\n\r\n    //  reset combine flag\r\n    $__gf__combine: false !global;\r\n  }\r\n}\r\n@mixin text-transformations($variable_list) {\r\n  @if index($variable_list, 'bold') {\r\n    font-weight: bold;\r\n  } @else {\r\n    font-weight: normal;\r\n  }\r\n  @if index($variable_list, 'italic') {\r\n    font-style: italic;\r\n  } @else {\r\n    font-style: normal;\r\n  }\r\n  @if index($variable_list, 'underline') {\r\n    text-decoration: underline;\r\n  } @else {\r\n    text-decoration: none;\r\n  }\r\n  @if index($variable_list, 'capitalize') {\r\n    text-transform: capitalize;\r\n  } @else {\r\n    text-transform: none;\r\n  }\r\n  @if index($variable_list, 'uppercase') {\r\n    text-transform: uppercase;\r\n  } @else {\r\n    text-transform: none;\r\n  }\r\n}\r\n\r\n// todo sprite","@import \"../../../../vz-helpers/base/import\";\r\n@import \"config\";\r\n@include google-font {\r\n  @include google-font($font-family);\r\n  @include google-font($font-headings-family);\r\n}\r\n\r\n/**/\r\nbody, html {\r\n  font-family: '' + $font-family+ '', sans-serif;\r\n  font-weight: 400;\r\n  color: $color-text-body;\r\n  font-size: $font-size-base;\r\n  line-height: $font-line-height;\r\n  width: 100%;\r\n}\r\nh1, h2, h3, h4, h5, h6,.heading-h1,.heading-h2,.heading-h3,.heading-h4,.heading-h5,.heading-h6 {\r\n  color: $color-heading;\r\n  font-family: '' + $font-headings-family+ '', sans-serif;\r\n  font-size: $font-headings-size-base;\r\n  line-height: $font-headings-line-height;\r\n  letter-spacing: $font-headings-letter-spacing;\r\n  @if variable-exists(font-headings-text-transform){\r\n    @include text-transformations($font-headings-text-transform);\r\n  }\r\n}\r\n/* default font size */\r\n.fa {\r\n  font-size: $font-size-base;\r\n}\r\n/* Override the bootstrap defaults */\r\nh1 ,.heading-h1{\r\n  font-size: $font-headings-size-base*2;\r\n}\r\nh2 ,.heading-h2{\r\n  font-size: $font-headings-size-base*1.8;\r\n}\r\nh3 ,.heading-h3{\r\n  font-size: $font-headings-size-base*1.2;\r\n}\r\nh4 ,.heading-h4{\r\n  font-size: $font-headings-size-base*1.2;\r\n}\r\nh5 ,.heading-h5{\r\n  font-size: $font-headings-size-base*1;\r\n}\r\nh6 ,.heading-h6{\r\n  font-size: $font-headings-size-base*.8;\r\n}\r\n\r\na ,.link {\r\n  color: $color-link;\r\n}\r\n\r\nbody{\r\n  background-color: #fce4ff;\r\n}\r\n\r\n","$color-text-primary: white;\r\n$color-primary: #229ac8;\r\n$color-text-body: #666;\r\n$color-heading: #444;\r\n$color-link: #23a1d1;\r\n$button-radius: 5px;\r\n$button-font-size: 14px;\r\n$button-border-width: 1px;\r\n$button-text-transform: (  );\r\n$button-box-shadow: true;\r\n$font-size-base: 14px;\r\n$font-family: Open Sans;\r\n$font-line-height: 1.3;\r\n$font-headings-family: Open Sans;\r\n$font-headings-size-base: 14px;\r\n$font-headings-line-height: 1.1;\r\n$font-headings-letter-spacing: 1px;\r\n$font-headings-text-transform: (  );\r\n$breakpoints: ('phone': 320px,'phone-wide': 480px,'phablet': 560px,'tablet-small': 640px,'tablet': 769px,'tablet-wide': 991px,'laptop': 1199px,'desktop': 1248px,'desktop-wide': 1440px);\r\n$layout-container-width: 980;\r\n$z-indexes: ('alert', 'modal','menu', 'product-thumb', 'site-header','loader','backdrop', 'page-wrapper', 'site-footer', 'mobile-menu-button', 'select-arrow','main-wrapper','modal-backdrop',);\r\n"]}
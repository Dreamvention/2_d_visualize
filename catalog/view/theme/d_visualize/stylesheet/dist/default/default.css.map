{"version":3,"sources":["../../../../vz-helpers/base/helper/_mixins.scss","../../../../vz-helpers/base/_typography.scss","default.scss","_config.scss"],"names":[],"mappings":"AA+Ve,2DAAY;AC/T3B;EACE,iBAAgB;EAChB,aAAY;EACZ,mBAAkB;EAClB,eAAc,EACf;;AAED;EACE,aAAY;EACZ,sBAAqB,EACtB;;AAED;EACE,sBAAqB,EAKtB;EAND;IAII,sBAAqB,EACtB;;AC1CH,IAAI;AACJ;EACE,qCAA8C;EAC9C,iBAAgB;EAChB,YCToB;EDUpB,gBCFmB;EDGnB,iBCDoB;EDEpB,YAAW,EACZ;;AACD;EACE,YCdkB;EDelB,qCAAuD;EACvD,gBCL4B;EDM5B,iBCL6B;EDM7B,oBCLgC;EHyV9B,oBAAmB;EAKnB,mBAAkB;EAKlB,sBAAqB;EAKrB,qBAAoB;EAKpB,qBAAoB,EEpWvB;;AACD,uBAAuB;AACvB;EACE,gBClBmB,EDmBpB;;AACD,qCAAqC;AACrC;EACE,gBAAqC,EACtC;;AACD;EACE,kBAAuC,EACxC;;AACD;EACE,kBAAuC,EACxC;;AACD;EACE,kBAAuC,EACxC;;AACD;EACE,gBAAqC,EACtC;;AACD;EACE,kBAAsC,EACvC;;AAED;EACE,eC/CkB,EDgDnB;;AAED;EACE,0BAAyB,EAC1B","file":"../../../../../../../../../../../../../default.css","sourcesContent":["@mixin prefixes($property, $value) {\n  -webkit-#{$property}: #{$value};\n  -khtml-#{$property}: #{$value};\n  -moz-#{$property}: #{$value};\n  -ms-#{$property}: #{$value};\n  -o-#{$property}: #{$value};\n  #{$property}: #{$value};\n}\n\n@mixin placeholder {\n  &::-webkit-input-placeholder {\n    @content\n  }\n  &:-moz-placeholder {\n    @content\n  }\n  &::-moz-placeholder {\n    @content\n  }\n  &:-ms-input-placeholder {\n    @content\n  }\n}\n\n@mixin flex {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n}\n\n@mixin inline-flex {\n  display: -webkit-inline-box;\n  display: -ms-inline-flexbox;\n  display: -webkit-inline-flex;\n  display: inline-flex;\n}\n\n@mixin transition($for: all, $value: .4s, $animate: ease) {\n  @include prefixes(\"transition\", $for $value $animate)\n}\n\n@mixin border-radius($radius: 4px) {\n  @include prefixes(\"border-radius\", $radius)\n}\n\n@mixin box-shadow($value: 0 0 5px #ccc) {\n  @include prefixes(\"box-shadow\", $value)\n}\n\n@mixin clearfix {\n  &:before,\n  &:after {\n    content: \" \";\n    display: table;\n  }\n  &:after {\n    clear: both;\n  }\n}\n@mixin arrow($direction, $size, $color) {\n  @if $direction == up {\n    border-left: $size solid transparent;\n    border-right: $size solid transparent;\n    border-bottom: $size solid $color;\n  } @else if $direction == down {\n    border-left: $size solid transparent;\n    border-right: $size solid transparent;\n    border-top: $size solid $color;\n  } @else if $direction == right {\n    border-top: $size solid transparent;\n    border-bottom: $size solid transparent;\n    border-left: $size solid $color;\n  } @else if $direction == left {\n    border-top: $size solid transparent;\n    border-bottom: $size solid transparent;\n    border-right: $size solid $color;\n  }\n}\n@mixin push-auto {\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n@mixin pseudo($display: block, $pos: absolute, $content: '') {\n  content: $content;\n  display: $display;\n  position: $pos;\n}\n\n@mixin triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {\n  @include pseudo($pos: $position);\n  width: 0;\n  height: 0;\n  @if $round {\n    border-radius: 3px;\n  }\n  @if $direction == down {\n    border-left: $size solid transparent;\n    border-right: $size solid transparent;\n    border-top: $size solid $color;\n    margin-top: 0 - round( $size / 2.5 );\n  } @else if $direction == up {\n    border-left: $size solid transparent;\n    border-right: $size solid transparent;\n    border-bottom: $size solid $color;\n    margin-bottom: 0 - round( $size / 2.5 );\n  } @else if $direction == right {\n    border-top: $size solid transparent;\n    border-bottom: $size solid transparent;\n    border-left: $size solid $color;\n    margin-right: -$size;\n  } @else if $direction == left {\n    border-top: $size solid transparent;\n    border-bottom: $size solid transparent;\n    border-right: $size solid $color;\n    margin-left: -$size;\n  }\n}\n@mixin retina($image, $width, $height) {\n  @media (min--moz-device-pixel-ratio: 1.3),\n  (-o-min-device-pixel-ratio: 2.6/2),\n  (-webkit-min-device-pixel-ratio: 1.3),\n  (min-device-pixel-ratio: 1.3),\n  (min-resolution: 1.3dppx) {\n    /* Serving 2x image on Retina display */\n    background-image: url($image);\n    background-size: $width $height;\n  }\n}\n@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {\n  @font-face {\n    font-family: quote($font-name);\n    src: url($file-name + '.eot');\n    src: url($file-name + '.eot?#iefix') format('embedded-opentype'),\n    url($file-name + '.woff') format('woff'),\n    url($file-name + '.ttf') format('truetype'),\n    url($file-name + '.svg##{$font-name}') format('svg');\n    font-weight: $weight;\n    font-style: $style;\n  }\n}\n@mixin center-transform {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n@mixin center-y-transform {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n@mixin center-margin($top, $left) {\n  position: absolute;\n  margin-top: - $top / 2;\n  margin-left: - $left / 2;\n  top: 50%;\n  left: 50%;\n}\n@mixin truncate($truncation-boundary) {\n  max-width: $truncation-boundary;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n@mixin flex-align-center {\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n}\n@mixin full-space{\n  content: \"\";\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n@mixin mq($width, $type: max) {\n  @if map_has_key($breakpoints, $width) {\n    $width: map_get($breakpoints, $width);\n    @if $type == max {\n      $width: $width - 1px;\n    }\n    @media only screen and (#{$type}-width: $width) {\n      @content;\n    }\n  }\n}\n@mixin adaptive($el, $type : 'max') {\n  .#{$el} {\n    @content;\n    @each $class, $screen in (xs, 'phone'), (sm, 'phablet'), (md, 'tablet'), (lg, 'desktop'), (xl, 'desktop-wide') {\n      @if ($type == 'min') {\n        @include mq($sc reen, 'min') {\n          &-#{$class} {\n            @content;\n          }\n        }\n      } @else {\n        @include mq($screen) {\n          &-#{$class} {\n            @content;\n          }\n        }\n      }\n    }\n  }\n}\n// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––\n//  Google Fonts  v.2.0.0\n// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––\n//\n//  Subset config\n//\n//  Note!\n//  The Latin subset is always included if available and need not be specified.\n//  Please note that if a client browser supports unicode-range the subset parameter\n//  is ignored; the browser will select from the subsets supported by the font to\n//  get what it needs to render the text.\n//  Source: https://developers.google.com/fonts/docs/getting_started\n//\n$google-font-subsets: (\n        'arabic'      : false\n, 'bengali'     : false\n, 'cyrillic'    : false\n, 'cyrillic-ext': false\n, 'devanagari'  : false\n, 'greek'       : false\n, 'greek-ext'   : false\n, 'gujarati'    : false\n, 'hebrew'      : false\n, 'khmer'       : false\n, 'latin'       : false\n, 'latin-ext'   : false\n, 'tamil'       : false\n, 'telugu'      : false\n, 'thai'        : false\n, 'vietnamese'  : false\n) !default;\n\n//\n//  Helper functions\n//\n@function __gf__list-unique($list) {\n  $result: ();\n  @each $item in $list { @if not index($result, $item+''){ $result: append($result, $item+'');} }\n  @each $item in $result { $result: set-nth($result, index($result, $item),unquote($item)); }\n  @return $result;\n}\n@function __gf__str-replace($string, $search, $replace: '') {\n  $index: str-index($string, $search);\n  @return if($index,\n          str-slice($string, 1, $index - 1) + $replace +\n    __gf__str-replace(str-slice($string, $index +\n    str-length($search)), $search, $replace),\n          $string);\n}\n@function __gf__str-explode($string){\n  $list:();\n  @for $i from 1 through str-length($string) { $list: append($list, str-slice($string, $i, $i)); }\n  @return $list;\n}\n//\n//   Google Fonts\n//\n@mixin google-font(\n  $name   : null,     //  string (unquoted will work too)\n  $weights: 400,      //  list or numeric value (100 200 300 400 ...)\n  $styles : normal,   //  list or string (normal and or italic)\n  $text   : null      //  string (don\\'t forget to unescape )\n){\n  //  base url\n  $URL: '//fonts.googleapis.com/css?family=';\n\n  //  create global variables\n  @if not variable-exists(__gf__combine){ $__gf__combine: false !global; }\n  @if not variable-exists(__gf__map){ $__gf__map: () !global; }\n  @if not variable-exists(google-font-subsets){ $google-font-subsets: () !global; }\n\n  //  append italic to weights\n  @if index($styles, italic) and not str-index($weights+'',i){\n    $wgt: if(index($styles, normal), $weights, ());\n    @each $weight in $weights { $wgt: append($wgt, $weight + i); }\n    $weights: $wgt;\n  }\n\n  //  reduce and encode text\n  @if $text {\n    $list: __gf__list-unique(__gf__str-explode($text));\n    $text:'&text=';\n    $encode:('!':'%21','#':'%23','$':'%24','&':'%26','\\'':'%27',\n            '(':'%28',')':'%29','*':'%2A','+':'%2B',',':'%2C',\n            '/':'%2F',':':'%3A',';':'%3B','=':'%3D','?':'%3F',\n            '@':'%40','[':'%5B',']':'%5D',' ':'%20');\n    @for $i from 1 through length($list) {\n      $char: map-get($encode,nth($list,$i)) or nth($list,$i);\n      $text: $text + $char;\n    }\n  }\n\n  //  subsets from config\n  $subset: '';\n  @each $set, $enabled in $google-font-subsets {\n    @if $enabled {\n      $subset: $subset + if($subset == '', '', ',') + $set;\n    }\n  }\n  $subset: if(str-length($subset) > 0 and $subset != latin, '&subset=' + $subset, '');\n\n  @if $name {\n    //  replace name whitespaces\n    $name: if(type-of($name) == string, unquote($name),$name);\n    $name: __gf__str-replace(inspect($name),' ','+');\n    @if $__gf__combine and not $text {\n      //  add weights to combine map\n      $wgt: map-get($__gf__map, $name) or ();\n      $wgt: __gf__list-unique(join($wgt, $weights, comma));\n      $__gf__map: map-merge($__gf__map, ($name: $wgt)) !global;\n    } @else {\n      //  create query\n      $query: '';\n      @each $weight in $weights { $query: $query + if($query != '', ',', '') + $weight; }\n      $query: __gf__str-replace($query, ' ');\n      $query: $name + if(str-length($query) > 0 and $query != '400',  ':'+ $query, '');\n\n      //  create single immport\n      @at-root { @import url($URL + $query + if($text, $text, '') + $subset); }\n    }\n  } @else {\n    //  set combine flag\n    $__gf__combine: true  !global;\n\n    //  nested includes\n    @content;\n\n    //  convert combine map to query\n    //  (remove weights if just 400)\n    $query:'';\n    @each $font, $weights in $__gf__map {\n      $query: $query + if($query != '', '|', '') + $font +\n                if(length($weights) == 1 and (nth($weights, 1) == '400'),\n                '', ':' + join((), $weights, comma));\n    }\n\n    //  remove query whitespaces\n    $query: __gf__str-replace($query,' ');\n\n    //  create combined immport\n    @at-root { @import url($URL + $query + $subset); }\n\n    //  reset combine flag\n    $__gf__combine: false !global;\n  }\n}\n@mixin text-transformations($variable_list) {\n  @if index($variable_list, 'bold') {\n    font-weight: bold;\n  } @else {\n    font-weight: normal;\n  }\n  @if index($variable_list, 'italic') {\n    font-style: italic;\n  } @else {\n    font-style: normal;\n  }\n  @if index($variable_list, 'underline') {\n    text-decoration: underline;\n  } @else {\n    text-decoration: none;\n  }\n  @if index($variable_list, 'capitalize') {\n    text-transform: capitalize;\n  } @else {\n    text-transform: none;\n  }\n  @if index($variable_list, 'uppercase') {\n    text-transform: uppercase;\n  } @else {\n    text-transform: none;\n  }\n}\n\n// todo sprite","h1, h2, h3, h4, h5, h6, .heading-h1, .heading-h2, .heading-h3, .heading-h4, .heading-h5, .heading-h6,\n.h1, .h2, .h3, .h4, .h5, .h6 {\n\n}\n\n.fa {\n}\n\n.h1, h1, .heading-h1 {\n  //font-size: $font-headings-size-base*2;\n}\n\n.h2, h2, .heading-h2 {\n  //font-size: $font-headings-size-base*1.8;\n}\n\n.h3, h3, .heading-h3 {\n  //font-size: $font-headings-size-base*1.2;\n}\n\n.h4, h4, .heading-h4 {\n  //font-size: $font-headings-size-base*1.2;\n}\n\n.h5, h5, .heading-h5 {\n  //font-size: $font-headings-size-base*1;\n}\n\n.h6, h6, .heading-h6 {\n  //font-size: $font-headings-size-base*.8;\n}\n\npre {\n  background: none;\n  border: none;\n  line-height: 1.3em;\n  font-size: 1em;\n}\n\nhr {\n  border: none;\n  margin: 1rem 0px 2rem;\n}\n\na {\n  text-decoration: none;\n  &:hover,\n  &:active {\n    text-decoration: none;\n  }\n}","@import \"../../../../vz-helpers/base/import\";\n@import \"config\";\n@include google-font {\n  @include google-font($font-family);\n  @include google-font($font-headings-family);\n}\n\n/**/\nbody, html {\n  font-family: '' + $font-family+ '', sans-serif;\n  font-weight: 400;\n  color: $color-text-body;\n  font-size: $font-size-base;\n  line-height: $font-line-height;\n  width: 100%;\n}\nh1, h2, h3, h4, h5, h6,.heading-h1,.heading-h2,.heading-h3,.heading-h4,.heading-h5,.heading-h6 {\n  color: $color-heading;\n  font-family: '' + $font-headings-family+ '', sans-serif;\n  font-size: $font-headings-size-base;\n  line-height: $font-headings-line-height;\n  letter-spacing: $font-headings-letter-spacing;\n  @if variable-exists(font-headings-text-transform){\n    @include text-transformations($font-headings-text-transform);\n  }\n}\n/* default font size */\n.fa {\n  font-size: $font-size-base;\n}\n/* Override the bootstrap defaults */\nh1 ,.heading-h1{\n  font-size: $font-headings-size-base*2;\n}\nh2 ,.heading-h2{\n  font-size: $font-headings-size-base*1.8;\n}\nh3 ,.heading-h3{\n  font-size: $font-headings-size-base*1.2;\n}\nh4 ,.heading-h4{\n  font-size: $font-headings-size-base*1.2;\n}\nh5 ,.heading-h5{\n  font-size: $font-headings-size-base*1;\n}\nh6 ,.heading-h6{\n  font-size: $font-headings-size-base*.8;\n}\n\na ,.link {\n  color: $color-link;\n}\n\nbody{\n  background-color: #fce4ff;\n}\n\n","$color-text-primary: white;\r\n$color-primary: #229ac8;\r\n$color-text-body: #666;\r\n$color-heading: #444;\r\n$color-link: #23a1d1;\r\n$button-radius: 5px;\r\n$button-font-size: 14px;\r\n$button-border-width: 1px;\r\n$button-text-transform: (  );\r\n$button-box-shadow: true;\r\n$font-size-base: 14px;\r\n$font-family: Open Sans;\r\n$font-line-height: 1.3;\r\n$font-headings-family: Open Sans;\r\n$font-headings-size-base: 14px;\r\n$font-headings-line-height: 1.1;\r\n$font-headings-letter-spacing: 1px;\r\n$font-headings-text-transform: (  );\r\n$breakpoints: ('phone': 320px,'phone-wide': 480px,'phablet': 560px,'tablet-small': 640px,'tablet': 769px,'tablet-wide': 991px,'laptop': 1199px,'desktop': 1248px,'desktop-wide': 1440px);\r\n$layout-container-width: 980;\r\n$z-indexes: ('alert', 'modal','menu', 'product-thumb', 'site-header','loader','backdrop', 'page-wrapper', 'site-footer', 'mobile-menu-button', 'select-arrow','main-wrapper','modal-backdrop',);\r\n"]}